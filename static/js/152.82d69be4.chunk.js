(()=>{"use strict";let t=new Map;const e="https://w3c.github.io/wot-binding-templates/bindings/protocols/modbus/modbus.schema.json",s="https://w3c.github.io/wot-binding-templates/bindings/protocols/coap/coap.schema.json",o="https://w3c.github.io/wot-binding-templates/bindings/protocols/http/http.schema.json",n="https://w3c.github.io/wot-binding-templates/bindings/protocols/mqtt/mqtt.schema.json";let r;function i(t){if(!t.hasOwnProperty("base"))return[];let i,c=t.base;try{i=new URL(c)}catch(l){return console.error(`base url is invalid: ${l}`),[]}void 0===r&&function(){const t=new Map;t.set("modbus",e),t.set("modbus+tcp",e),t.set("modbus+udp",e),t.set("coap",s),t.set("coap+tcp",s),t.set("coap+ws",s),t.set("coaps",s),t.set("coaps+tcp",s),t.set("coaps+ws",s),t.set("http",o),t.set("https",o),t.set("mqtt",n),t.set("mqtt+tcp",n),t.set("mqtt+ssl",n),t.set("mqtt+ws",n),r=t}();let a=i.protocol.substring(0,i.protocol.length-1);console.debug(`cheking binding schema map for ${a}...`);let p=r.get(a);return p?[p]:[]}const c=t=>"object"===typeof t&&!Array.isArray(t)&&null!==t&&(!!t.hasOwnProperty("@type")&&t["@type"].indexOf("tm:ThingModel")>-1);let a=new Map;self.onmessage=async e=>{if(!("string"===typeof e.data||e.data instanceof String))return;let s={};try{s=JSON.parse(e.data)}catch(r){return console.debug(`ran into error while parsing TD: ${r}`),void postMessage(a)}if("object"!==typeof s||s.constructor===Array||!s)return;let o=[c(s)?"https://raw.githubusercontent.com/w3c/wot-thing-description/main/validation/tm-json-schema-validation.json":"https://raw.githubusercontent.com/thingweb/thingweb-playground/%40thing-description-playground/web%401.0.0/packages/playground-core/td-schema.json",...function(t){if(!t)return[];let e=typeof t;if("string"!==e&&t.constructor!==Array)return[];if("string"===e)return[t];let s=[];for(let o=0;o<t.length;o++){let e=t[o];if("object"===typeof e&&!Array.isArray(e)&&null!==e||"string"===typeof e)if("string"!==typeof e)for(const t in e){if(!e.hasOwnProperty(t))continue;let o=e[t];"string"===typeof o&&s.push(o)}else s.push(e)}return s}(s["@context"]),...i(s)];c&&(o=o.filter((t=>"https://www.w3.org/2019/wot/td/v1"!==t)));let n=await async function(e){let s=new Map;for(let o=0;o<e.length;o++){let n=e[o],i=t.get(n);if(void 0===i)try{const t=new URL(n),e=await fetch(t),o=await e.json();s.set(n,o)}catch(r){console.error(r),s.set(n,void 0)}else console.debug(`using cached schema for ${n}`),s.set(n,i)}return s}(o);!function(e){e.forEach((function(e,s){void 0!==e&&t.set(s,e)}))}(n),a=n,postMessage(n),console.debug("schema worker sent response...")}})();